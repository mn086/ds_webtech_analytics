// Traditionelle anonyme Funktion
(function (a) {
  return a + 100;
});

// 1. Entferne das Wort "function" und setze einen Pfeil zwischen Argument und öffnender Klammer
(a) => {
  return a + 100;
};

// 2. Entferne die geschweiften Klammern und das Wort "return" - die Rückgabe ist implizit
(a) => a + 100;

// 3. Entferne die Parameter-Klammern
a => a + 100;

// Traditionelle Funktion
function bob(a) {
  return a + 100;
}

// Pfeilfunktion
const bob2 = (a) => a + 100;



// Eine leere Pfeilfunktion gibt undefined zurück
const empty = () => {};

(() => "foobar")();
// Gibt "foobar" zurück
// (dies ist ein Immediately Invoked Function Expression)

const simple = (a) => (a > 15 ? 15 : a);
simple(16); // 15
simple(10); // 10

const max = (a, b) => (a > b ? a : b);

// Einfaches Filtern, Mappen etc. von Arrays
const arr = [5, 6, 13, 0, 1, 18, 23];

const sum = arr.reduce((a, b) => a + b);
// 66

const even = arr.filter((v) => v % 2 === 0);
// [6, 0, 18]

const double = arr.map((v) => v * 2);
// [10, 12, 26, 0, 2, 36, 46]

// Parameterlose Pfeilfunktionen, die visuell leichter zu lesen sind
setTimeout(() => {
  console.log("Ich passiere früher");
  setTimeout(() => {
    // tieferer Code
    console.log("Ich passiere später");
  }, 1);
}, 1);
